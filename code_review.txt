commit 7a71582ca33f29fe460485aaf88203ef52d40bdf
Author: Luckymax <lurudy560@gmail.com>
Date:   Wed Jul 30 11:27:08 2025 +0800

    初次提交

diff --git a/index.html b/index.html
new file mode 100644
index 0000000..ab1b286
--- /dev/null
+++ b/index.html
@@ -0,0 +1,45 @@
+<!DOCTYPE html>
+<html lang="zh-CN">
+
+<head>
+    <meta charset="UTF-8">
+    <title>虚空织者：因果之茧 v0.4 Refactored</title>
+    <link rel="stylesheet" href="style.css">
+</head>
+
+<body>
+    <div id="game-container">
+        <!-- 顶部资源栏 -->
+        <div id="top-bar">
+            <p>你拥有 <span id="sp-display">0</span> 奇点 (SP).</p>
+            <p>每秒生产: <span id="sps-display">0</span> SP</p>
+        </div>
+
+        <!-- 叙事区 -->
+        <div id="narrative-pane">
+            <p id="narrative-text">...</p>
+        </div>
+
+        <!-- 主要操作区 -->
+        <div id="main-actions">
+            <button id="manual-click-button">我.</button>
+        </div>
+
+        <!-- 织者列表 -->
+        <div id="weavers-container">
+            <!-- 由JS动态生成 -->
+        </div>
+
+        <!-- 转生区 -->
+        <div id="prestige-container">
+            <!-- 由JS动态生成 -->
+        </div>
+    </div>
+
+    <!-- 关键依赖和入口脚本 -->
+    <script src="https://cdn.jsdelivr.net/npm/decimal.js@10.4.3/decimal.min.js"></script>
+    <!-- 注意: type="module" 是启用模块化JS的关键 -->
+    <script type="module" src="js/main.js"></script>
+</body>
+
+</html>
\ No newline at end of file
diff --git a/js/constants.js b/js/constants.js
new file mode 100644
index 0000000..1039955
--- /dev/null
+++ b/js/constants.js
@@ -0,0 +1,16 @@
+// js/constants.js
+
+export const WEAVER_DATA = [
+    { tier: 1, name: "存在的确证", basePrice: "10", priceGrowth: "10" },
+    { tier: 2, name: "因果链", basePrice: "100", priceGrowth: "100" },
+    { tier: 3, name: "空间褶皱", basePrice: "1e4", priceGrowth: "1e3" },
+    { tier: 4, name: "时间流", basePrice: "1e6", priceGrowth: "1e4" },
+    { tier: 5, name: "物质熔炉", basePrice: "1e9", priceGrowth: "1e5" },
+    { tier: 6, name: "生命火种", basePrice: "1e13", priceGrowth: "1e6" },
+    { tier: 7, name: "集体无意识", basePrice: "1e18", priceGrowth: "1e7" },
+    { tier: 8, name: "现实肌腱", basePrice: "1e24", priceGrowth: "1e8" },
+    { tier: 9, name: "超弦共振", basePrice: "1e31", priceGrowth: "1e9" },
+    { tier: 10, name: "虚空织者", basePrice: "1e40", priceGrowth: "1e10" },
+];
+
+export const GAME_TICK_MS = 50; // 游戏刷新率，毫秒
diff --git a/js/cores/gameLoop.js b/js/cores/gameLoop.js
new file mode 100644
index 0000000..aac3037
--- /dev/null
+++ b/js/cores/gameLoop.js
@@ -0,0 +1,18 @@
+// js/core/gameLoop.js
+import { game } from '../state.js';
+import { GAME_TICK_MS } from '../constants.js';
+import { calculateProduction } from './production.js';
+import { updateUI } from './ui.js';
+
+function loop() {
+    const now = Date.now();
+    const deltaTime = (now - game.lastTick) / 1000; // 秒
+    game.lastTick = now;
+
+    calculateProduction(deltaTime);
+    updateUI();
+}
+
+export function startGameLoop() {
+    setInterval(loop, GAME_TICK_MS);
+}
diff --git a/js/cores/production.js b/js/cores/production.js
new file mode 100644
index 0000000..a86cf42
--- /dev/null
+++ b/js/cores/production.js
@@ -0,0 +1,29 @@
+// js/core/production.js
+import { game } from '../state.js';
+
+export function calculateProduction(deltaTime) {
+    const effectiveDelta = deltaTime * game.flow.causalityFlow.toNumber();
+
+    // 1. 从高阶到低阶计算层叠生产
+    for (let i = game.weavers.length - 1; i > 0; i--) {
+        const producer = game.weavers[i];
+        const produced = game.weavers[i - 1];
+        if (producer.totalAmount.gt(0)) {
+            const gain = producer.totalAmount.times(producer.multiplier).times(effectiveDelta);
+            produced.amountProduced = produced.amountProduced.plus(gain);
+        }
+    }
+
+    // 2. 更新所有织者的总量
+    game.weavers.forEach(w => {
+        w.totalAmount = w.amountOwned.plus(w.amountProduced);
+    });
+
+    // 3. 计算SP生产
+    const weaver1 = game.weavers[0];
+    const spGain = weaver1.totalAmount.times(weaver1.multiplier).times(effectiveDelta);
+    game.resources.singularityPoints = game.resources.singularityPoints.plus(spGain);
+
+    // 4. 更新SPS统计数据用于UI显示
+    game.stats.sps = weaver1.totalAmount.times(weaver1.multiplier).times(game.flow.causalityFlow);
+}
diff --git a/js/cores/ui.js b/js/cores/ui.js
new file mode 100644
index 0000000..a9b62d3
--- /dev/null
+++ b/js/cores/ui.js
@@ -0,0 +1,118 @@
+// js/core/ui.js
+import { game } from '../state.js';
+import format from '../utils/format.js';
+import { buyWeaver } from '../features/weavers.js';
+import { dimensionalFold, lawSingularity } from '../features/prestige.js';
+
+// 获取所有DOM元素
+const elements = {
+    spDisplay: document.getElementById('sp-display'),
+    spsDisplay: document.getElementById('sps-display'),
+    narrativeText: document.getElementById('narrative-text'),
+    manualClickButton: document.getElementById('manual-click-button'),
+    weaversContainer: document.getElementById('weavers-container'),
+    prestigeContainer: document.getElementById('prestige-container'),
+};
+
+// 初始化UI，创建所有动态元素
+export function initializeUI() {
+    // 创建织者行
+    game.weavers.forEach(weaver => {
+        const row = document.createElement('div');
+        row.className = 'weaver-row';
+        row.id = `weaver-row-${weaver.tier}`;
+        row.style.display = 'none'; // 初始隐藏
+        row.innerHTML = `
+            <span>${weaver.name} (x${format(weaver.multiplier)})</span>
+            <div class="weaver-info">
+                <span>数量: <span id="weaver-amount-${weaver.tier}">0</span></span>
+                <button id="buy-weaver-${weaver.tier}">购买 (成本: <span id="weaver-cost-${weaver.tier}">0</span>)</button>
+            </div>
+        `;
+        elements.weaversContainer.appendChild(row);
+        document.getElementById(`buy-weaver-${weaver.tier}`).onclick = () => buyWeaver(weaver.tier);
+    });
+
+    // 手动点击事件
+    elements.manualClickButton.onclick = () => {
+        if (!game.stats.firstClickDone) {
+            game.stats.firstClickDone = true;
+            elements.narrativeText.textContent = "我。";
+        }
+        game.resources.singularityPoints = game.resources.singularityPoints.plus(1);
+    };
+}
+
+// 每一帧更新UI的函数
+export function updateUI() {
+    // 更新资源
+    elements.spDisplay.textContent = format(game.resources.singularityPoints);
+    elements.spsDisplay.textContent = format(game.stats.sps);
+
+    // 更新叙事和手动按钮可见性
+    if (!game.stats.firstClickDone) {
+        elements.narrativeText.textContent = "中央有一个脉动的光点...";
+    } else if (game.weavers[0].totalAmount.isZero()) {
+        elements.manualClickButton.style.display = 'inline-block';
+    } else {
+        elements.manualClickButton.style.display = 'none';
+    }
+
+    // 更新织者列表
+    game.weavers.forEach(weaver => {
+        const row = document.getElementById(`weaver-row-${weaver.tier}`);
+        const canAfford = game.resources.singularityPoints.gte(weaver.currentPrice);
+
+        // 解锁逻辑
+        let isVisible = false;
+        if (weaver.tier === 1) {
+            isVisible = game.resources.singularityPoints.gte(10) || weaver.totalAmount.gt(0);
+        } else {
+            const prevWeaver = game.weavers[weaver.tier - 2];
+            isVisible = prevWeaver && prevWeaver.totalAmount.gt(0);
+        }
+
+        row.style.display = isVisible ? 'flex' : 'none';
+
+        if (isVisible) {
+            document.getElementById(`weaver-amount-${weaver.tier}`).textContent = format(weaver.totalAmount);
+            document.getElementById(`weaver-cost-${weaver.tier}`).textContent = format(weaver.currentPrice);
+            document.getElementById(`buy-weaver-${weaver.tier}`).disabled = !canAfford;
+        }
+    });
+
+    // 更新转生区
+    updatePrestigeUI();
+}
+
+function updatePrestigeUI() {
+    elements.prestigeContainer.innerHTML = ''; // 简单清空
+
+    // 维度折叠
+    const foldWeaver = game.weavers[3]; // T4
+    if (foldWeaver && foldWeaver.totalAmount.gt(0)) {
+        const canFold = foldWeaver.totalAmount.gte(20);
+        const div = document.createElement('div');
+        div.className = 'prestige-action';
+        div.innerHTML = `
+            <span>维度折叠 (需要20个时间流): 重置并获得x2生产力加成。当前加成: x${format(Decimal.pow(2, game.prestige.folds))}</span>
+            <button id="fold-button" ${canFold ? '' : 'disabled'}>折叠</button>
+        `;
+        elements.prestigeContainer.appendChild(div);
+        document.getElementById('fold-button').onclick = dimensionalFold;
+    }
+
+    // 法则奇点
+    const singularityWeaver = game.weavers[7]; // T8
+    if (singularityWeaver && singularityWeaver.totalAmount.gt(0)) {
+        const canSingularity = singularityWeaver.totalAmount.gte(20);
+        const div = document.createElement('div');
+        div.className = 'prestige-action';
+        div.innerHTML = `
+            <span>法则奇点 (需要20个现实肌腱): 重置一切，但提升因果流速。当前流速: x${format(game.flow.causalityFlow)}</span>
+            <button id="singularity-button" ${canSingularity ? '' : 'disabled'}>奇点</button>
+        `;
+        elements.prestigeContainer.appendChild(div);
+        document.getElementById('singularity-button').onclick = lawSingularity;
+    }
+}
diff --git a/js/features/prestige.js b/js/features/prestige.js
new file mode 100644
index 0000000..69c8f93
--- /dev/null
+++ b/js/features/prestige.js
@@ -0,0 +1,43 @@
+// js/features/prestige.js
+import { game } from '../state.js';
+import { recalculateMultipliers } from './weavers.js';
+
+function resetForPrestige() {
+    game.resources.singularityPoints = new Decimal(10); // 初始SP
+    game.weavers.forEach(w => {
+        w.amountOwned = new Decimal(0);
+        w.amountProduced = new Decimal(0);
+        w.totalAmount = new Decimal(0);
+    });
+}
+
+// GDD: 当拥有20个“时间流”(织者4)时
+export function dimensionalFold() {
+    const requiredTier = 4;
+    const weaver = game.weavers[requiredTier - 1];
+    if (weaver.totalAmount.gte(20)) {
+        resetForPrestige();
+        game.prestige.folds++;
+        recalculateMultipliers();
+        console.log(`维度折叠! 次数: ${game.prestige.folds}`);
+    }
+}
+
+// GDD: 当拥有20个“现实肌腱”(织者8)时
+export function lawSingularity() {
+    const requiredTier = 8;
+    const weaver = game.weavers[requiredTier - 1];
+    if (weaver.totalAmount.gte(20)) {
+        resetForPrestige();
+        game.prestige.folds = 0; // 法则奇点重置维度折叠
+        game.prestige.singularities++;
+
+        // GDD: 提升因果流速 (Tickspeed)
+        // 简化公式: 每次奇点使基础速度提升 (1 + 0.1 * singularities)
+        const baseFlowRate = 1;
+        game.flow.causalityFlow = new Decimal(baseFlowRate + 0.1 * game.prestige.singularities);
+
+        recalculateMultipliers(); // 折叠数重置后，需要重新计算乘数
+        console.log(`法则奇点! 次数: ${game.prestige.singularities}`);
+    }
+}
diff --git a/js/features/weavers.js b/js/features/weavers.js
new file mode 100644
index 0000000..3ca6e4c
--- /dev/null
+++ b/js/features/weavers.js
@@ -0,0 +1,42 @@
+// js/features/weavers.js
+import { game } from '../state.js';
+import { WEAVER_DATA } from '../constants.js';
+
+// 初始化所有织者对象，并放入game.weavers数组
+export function initializeWeavers() {
+    game.weavers = WEAVER_DATA.map(data => ({
+        ...data,
+        basePrice: new Decimal(data.basePrice),
+        priceGrowth: new Decimal(data.priceGrowth),
+        amountOwned: new Decimal(0),
+        amountProduced: new Decimal(0),
+        totalAmount: new Decimal(0),
+        multiplier: new Decimal(1),
+        // 计算当前价格的getter
+        get currentPrice() {
+            return this.basePrice.times(this.priceGrowth.pow(this.amountOwned));
+        },
+    }));
+}
+
+// 购买织者的核心函数
+export function buyWeaver(tier) {
+    const weaver = game.weavers[tier - 1];
+    if (game.resources.singularityPoints.gte(weaver.currentPrice)) {
+        game.resources.singularityPoints = game.resources.singularityPoints.sub(weaver.currentPrice);
+        weaver.amountOwned = weaver.amountOwned.plus(1);
+    }
+}
+
+// 重新计算所有织者的乘数（转生后调用）
+export function recalculateMultipliers() {
+    // 维度折叠的加成: 2^folds
+    const foldBonus = Decimal.pow(2, game.prestige.folds);
+
+    // 未来在这里加入法则树等其他加成
+    const totalMultiplier = foldBonus;
+
+    game.weavers.forEach(w => {
+        w.multiplier = totalMultiplier;
+    });
+}
diff --git a/js/main.js b/js/main.js
new file mode 100644
index 0000000..a8a0ce1
--- /dev/null
+++ b/js/main.js
@@ -0,0 +1,23 @@
+// js/main.js
+import { initializeWeavers } from './features/weavers.js';
+import { initializeUI } from './core/ui.js';
+import { startGameLoop } from './core/gameLoop.js';
+
+// 初始化游戏
+function init() {
+    console.log("虚空织者 v0.4 (重构版) - 初始化...");
+
+    // 1. 初始化数据结构
+    initializeWeavers();
+
+    // 2. 创建UI元素并绑定事件
+    initializeUI();
+
+    // 3. 启动游戏循环
+    startGameLoop();
+
+    console.log("初始化完成，游戏开始。");
+}
+
+// 启动游戏
+init();
diff --git a/js/state.js b/js/state.js
new file mode 100644
index 0000000..876ae3b
--- /dev/null
+++ b/js/state.js
@@ -0,0 +1,28 @@
+// js/state.js
+Decimal.set({ precision: 100 }); // 设定更高的精度以适应新GDD
+
+// 游戏状态树 (Single Source of Truth)
+export const game = {
+    // 资源
+    resources: {
+        singularityPoints: new Decimal(0),
+    },
+    // 织者数组
+    weavers: [],
+    // 转生相关状态
+    prestige: {
+        folds: 0,
+        singularities: 0,
+    },
+    // 因果流速 (Tickspeed)
+    flow: {
+        causalityFlow: new Decimal(1), // 全局速度乘数
+    },
+    // 统计数据与状态标志
+    stats: {
+        firstClickDone: false,
+        sps: new Decimal(0), // 每秒SP产量，用于显示
+    },
+    // 游戏循环控制
+    lastTick: Date.now(),
+};
diff --git a/js/utils/format.js b/js/utils/format.js
new file mode 100644
index 0000000..ee7d815
--- /dev/null
+++ b/js/utils/format.js
@@ -0,0 +1,10 @@
+// js/utils/format.js
+export default function format(decimal) {
+    if (!(decimal instanceof Decimal)) {
+        decimal = new Decimal(decimal);
+    }
+    if (decimal.lt(1000)) {
+        return decimal.toDP(2).toFixed();
+    }
+    return decimal.toExponential(2).replace('e+', 'e');
+}
diff --git a/style.css b/style.css
new file mode 100644
index 0000000..2dd173f
--- /dev/null
+++ b/style.css
@@ -0,0 +1,71 @@
+/* style.css */
+body {
+    background-color: #0d1117;
+    color: #c9d1d9;
+    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
+    display: flex;
+    justify-content: center;
+    align-items: flex-start;
+    /* 从顶部开始对齐 */
+    min-height: 100vh;
+    padding-top: 50px;
+    user-select: none;
+}
+
+#game-container {
+    width: 90%;
+    max-width: 800px;
+    border: 1px solid #30363d;
+    padding: 20px;
+    background-color: #161b22;
+    border-radius: 8px;
+}
+
+#top-bar p {
+    margin: 5px 0;
+    font-size: 1.2em;
+}
+
+#narrative-pane {
+    color: #8b949e;
+    min-height: 3em;
+    margin: 15px 0;
+    font-style: italic;
+}
+
+button {
+    background-color: #21262d;
+    color: #c9d1d9;
+    border: 1px solid #30363d;
+    padding: 10px 15px;
+    cursor: pointer;
+    margin: 5px;
+    border-radius: 6px;
+    transition: background-color 0.2s, border-color 0.2s;
+}
+
+button:hover {
+    background-color: #30363d;
+    border-color: #8b949e;
+}
+
+button:disabled {
+    background-color: #161b22;
+    color: #484f58;
+    border-color: #21262d;
+    cursor: not-allowed;
+}
+
+.weaver-row,
+.prestige-action {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    padding: 10px;
+    border-bottom: 1px solid #21262d;
+    margin-bottom: 5px;
+}
+
+.weaver-info {
+    text-align: right;
+}
\ No newline at end of file
